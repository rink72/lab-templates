---
parameters:
  cloudType: ""
  service: ""
  gcpKeyData: ""
  apply: false
  timeout: 90

steps:
  # TODO: Clean this up. 
  # - Break it in to separate installer scripts
  # - Set specific versions to use. Right now we're installing the latest
  # - We could possibly move the packages in to our own custom choco packages
  - pwsh: |
      # OS check. This is to simplify terragrunt install but also
      # because, for some reason, the linux agents were not
      # picking up our helper files in the repo
      if (-not $IsWindows)
      {
        throw "Terragrunt deployments must use a windows agent"
      }

      choco install terragrunt --confirm

      (New-Object Net.WebClient).DownloadFile("https://dl.google.com/dl/cloudsdk/channels/rapid/GoogleCloudSDKInstaller.exe", "$env:Temp\GoogleCloudSDKInstaller.exe")
      & $env:Temp\GoogleCloudSDKInstaller.exe /S /allusers
    

      $ModuleInstalled = Get-Module `
        -Name GoogleCloud `
        -ListAvailable

      if (-not $ModuleInstalled)
      {
        Install-Module GoogleCloud -Force | Out-Null
      }
    displayName: Install prerequisites

  - ${{ if eq(parameters.apply, false) }}:
    - pwsh: |
        [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('${{ parameters.gcpKeyData }}')) > "$($env:TEMP)/key.json"
        $env:GOOGLE_APPLICATION_CREDENTIALS = "$($env:TEMP)/key.json"

        gcloud auth activate-service-account --quiet --key-file "$($env:TEMP)/key.json"

        $(Pipeline.Workspace)/s/terragrunt/scripts/Deploy-GCPTerragruntConfig.ps1 -Service ${{ parameters.service }}
      displayName: Terragrunt plan

  - ${{ else }}:
    - pwsh: |
        [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('${{ parameters.gcpKeyData }}')) > "$($env:TEMP)/key.json"
        $env:GOOGLE_APPLICATION_CREDENTIALS = "$($env:TEMP)/key.json"

        gcloud auth activate-service-account --quiet --key-file "$($env:TEMP)/key.json"

        $(Pipeline.Workspace)/s/terragrunt/scripts/Deploy-GCPTerragruntConfig.ps1 -Service ${{ parameters.service }} -Apply
      displayName: Terragrunt apply

